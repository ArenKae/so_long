### COLORS ###
DEF_COLOR = \033[0;39m
GRAY = \033[0;90m
RED = \033[0;91m
GREEN = \033[0;92m
YELLOW = \033[0;93m
BLUE = \033[0;94m
MAGENTA = \033[0;95m
CYAN = \033[0;96m
WHITE = \033[0;97m

### VARIABLES ###

NAME = so_long
NAME_BONUS = so_long_bonus
CC = gcc
CFLAGS += -Wall -Werror -Wextra -I minilibx
MLX_FLAGS = -L./minilibx -lmlx -L/usr/lib/X11 -lXext -lX11
HEADER 	= src/so_long.h
INCLUDES = -I/usr/include -Imlx
OBJF = .cache_exists	# needed to create obj/ directory
.DEFAULT_GOAL := all	# make = make all

# Directories
MAIN_DIR = src/main/
CHECK_DIR = src/check_map/
UTILS_DIR = src/utils/
BONUS_DIR = src/bonus/
OBJ_DIR = obj/

# Source Files
MAIN_FILES = main.c map_creation.c images.c game.c game_2.c
CHECK_FILES = check_map_name.c check_map_1.c check_map_2.c check_path.c check_path_2.c
UTILS_FILES = utils.c utils_2.c utils_memory.c print.c

MAIN_FILES_BONUS = map_creation.c
CHECK_FILES_BONUS = check_map_name.c check_path.c check_path_2.c
UTILS_FILES_BONUS = utils.c utils_2.c utils_memory.c
BONUS_FILES = 	main_bonus.c patrol_bonus.c patrol_moves_bonus.c animation_bonus.c \
				images_bonus.c check_map_1_bonus.c check_map_2_bonus.c \
				game_bonus.c game_bonus_2.c print_bonus.c

# Object Files
MAIN_OBJ = $(addprefix $(OBJ_DIR), $(MAIN_FILES:.c=.o))
CHECK_OBJ = $(addprefix $(OBJ_DIR), $(CHECK_FILES:.c=.o))
UTILS_OBJ = $(addprefix $(OBJ_DIR), $(UTILS_FILES:.c=.o))

MAIN_OBJ_BONUS = $(addprefix $(OBJ_DIR), $(MAIN_FILES_BONUS:.c=.o))
CHECK_OBJ_BONUS = $(addprefix $(OBJ_DIR), $(CHECK_FILES_BONUS:.c=.o))
UTILS_OBJ_BONUS = $(addprefix $(OBJ_DIR), $(UTILS_FILES_BONUS:.c=.o))
BONUS_OBJ = $(addprefix $(OBJ_DIR), $(BONUS_FILES:.c=.o))

### COMPILATION ###

$(OBJF):
	@mkdir -p $(OBJ_DIR)

# Creating object files (.o) from source files (.c) inside the OBJ_DIR directory.
# The option -o indicates the name of the outpout, the option -c indicates the source that is used.

$(OBJ_DIR)%.o : $(MAIN_DIR)%.c $(HEADER) | $(OBJF)
	@echo "$(YELLOW)Compiling $<...$(DEF_COLOR)"
	@$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDES)

$(OBJ_DIR)%.o : $(CHECK_DIR)%.c $(HEADER) | $(OBJF)
	@echo "$(YELLOW)Compiling $<...$(DEF_COLOR)"
	@$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDES)

$(OBJ_DIR)%.o : $(UTILS_DIR)%.c $(HEADER) | $(OBJF)
	@echo "$(YELLOW)Compiling $<...$(DEF_COLOR)"
	@$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDES)

# Compiling all objets files (.o) to a file "NAME" :
$(NAME) : $(MAIN_OBJ) $(CHECK_OBJ) $(UTILS_OBJ)
	@$(CC) $(CFLAGS) $^ $(MLX_FLAGS) -o $@
	@echo " "
	@echo "$(GREEN)-> So_long compiled!$(DEF_COLOR)"
	@echo " "

### BONUS ###

$(OBJ_DIR)%.o : $(BONUS_DIR)%.c $(HEADER) | $(OBJF)
	@echo "$(YELLOW)Compiling $<...$(DEF_COLOR)"
	@$(CC) $(CFLAGS) -c $< -o $@ $(INCLUDES)

$(NAME_BONUS) : $(MAIN_OBJ_BONUS) $(CHECK_OBJ_BONUS) $(UTILS_OBJ_BONUS) $(BONUS_OBJ)
	@$(CC) $(CFLAGS) $^ $(MLX_FLAGS) -o $@
	@echo " "
	@echo "$(GREEN)-> So_long_bonus compiled!$(DEF_COLOR)"
	@echo " "

### MEMO ###
# 	Sp√©cial variables :
#		$@	Represents the target file that is being generated by the rule
#		$<	Represents the first dependency of the rule
#		$^	Represents all the dependencies of the rule, separated by spaces.
#		$?	Represents a list of dependencies that are newer than the target file.
#		$*	Represents the stem of the target filename (without the extension)

### RULES ##

minilibx:
	@echo "$(YELLOW)Compiling minilibx... $(DEF_COLOR)"
	@$(MAKE) -C ./minilibx/ > .mlx_outpout.txt 2>&1
	@echo " "
	@if grep -q "Nothing to be done for" .mlx_outpout.txt; then \
    	echo "$(GREEN)-> Minilibx already compiled!$(DEF_COLOR)"; \
	else \
    	echo "$(GREEN)-> Minilibx compiled!$(DEF_COLOR)"; \
	fi
	@echo " "

all: minilibx $(NAME)

bonus: minilibx $(NAME_BONUS)

# Flag to check if 'clean' is executed alone or as a dependency of 'fclean'
fclean_flag := false
do_fclean:
	@$(eval fclean_flag := true)

clean:
	@echo "$(YELLOW)Cleaning so_long... $(DEF_COLOR)"
	@echo " "
	@echo "$(YELLOW)Cleaning minilibx... $(DEF_COLOR)"
	@make clean -C minilibx
	@echo "$(CYAN)Minilibx cleaned!$(DEF_COLOR)"
	@rm -rf $(OBJ_DIR)
	@rm -f .mlx_outpout.txt
	@echo " "
	@if [ "$(fclean_flag)" = "false" ]; then \
		echo "$(GREEN)-> So_long object files cleaned!$(DEF_COLOR)"; \
    fi
	@if [ "$(fclean_flag)" = "true" ]; then \
		echo "$(GREEN)-> So_long object files & executables cleaned!$(DEF_COLOR)"; \
    fi
	@echo " "

fclean: do_fclean clean
	@rm -f $(NAME)
	@rm -f $(NAME_BONUS)

re:	fclean minilibx all
	@echo "$(BLUE)-> Cleaned and rebuilt everything for So_long!$(DEF_COLOR)"

# Phony targets are used to differenciate makefile rules from system files.
.PHONY: all clean fclean re minilibx bonus